Description: Distributed training with AWS Batch
Parameters:
  LatestEcsGpuAmiId:  # We don't use this variable to avoid introducing regressions due to automatic switching of AMI
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/gpu/recommended/image_id'

Resources:
  ################################################################################
  # S3 Data Bucket for temporary files (cleared after 365 days)
  ################################################################################
  S3DevBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::StackName}-dev-${AWS::Region}'
      LifecycleConfiguration:
        Rules:
          - Id: ObjectExpiration
            Status: Enabled
            ExpirationInDays: '365'

  S3LocalDataBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::StackName}-data-${AWS::Region}'
      VersioningConfiguration:  # Required for bucket replication
        Status: Enabled

  BasicS3LinkedLustreFileSystem:
    Type: AWS::FSx::FileSystem
    Properties:
      FileSystemType: "LUSTRE"
      FileSystemTypeVersion: 2.12
      StorageCapacity: 12000
      SubnetIds: [!Ref IPv6SubnetB]
      SecurityGroupIds: [!Ref BatchSecurityGroup]
      LustreConfiguration:
        AutoImportPolicy: "NEW_CHANGED"
        DeploymentType: "PERSISTENT_1"
        PerUnitStorageThroughput: 200
        ImportPath: !Sub 's3://${S3LocalDataBucket}'
        WeeklyMaintenanceStartTime: "6:20:30"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-data'

  DevS3LinkedLustreFileSystem:
    Type: AWS::FSx::FileSystem
    Properties:
      FileSystemType: "LUSTRE"
      FileSystemTypeVersion: 2.12
      StorageCapacity: 12000
      SubnetIds: [!Ref IPv6SubnetB]
      SecurityGroupIds: [!Ref BatchSecurityGroup]
      LustreConfiguration:
        AutoImportPolicy: "NEW_CHANGED"
        DeploymentType: "PERSISTENT_1"
        PerUnitStorageThroughput: 200
        ImportPath: !Sub 's3://${S3DevBucket}'
        ExportPath: !Sub 's3://${S3DevBucket}'
        WeeklyMaintenanceStartTime: "6:20:30"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-dev'


  ################################################################################
  # Container Repository for AWS Batch
  ################################################################################
  ECR:
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
            {
              "rulePriority": 1,
              "description": "Expire untagged images",
              "selection": {
                "tagStatus": "untagged",
                "countType": "sinceImagePushed",
                "countUnit": "days",
                "countNumber": 31
              },
              "action": { "type": "expire" }
            }]
          }
      RepositoryName: { Ref: "AWS::StackName" }

  ################################################################################
  # Network configuration for AWS Batch
  ################################################################################
  BatchVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  # IPv6 enabled VPC is needed for task networking without NAT Gateways for AWS
  # Batch Multi-Node jobs. See "Using a VPC in dual-stack mode" at
  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html
  BatchVpcCidrBlockIpv6:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref BatchVPC
      AmazonProvidedIpv6CidrBlock: true
  # Public subnets
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref BatchVPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BatchVPC
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BatchVPC
  NatEip:
     Type: AWS::EC2::EIP
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      SubnetId: !Ref PublicSubnetB
  NatRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref RouteTable
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  InternetIPv6Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationIpv6CidrBlock: '::/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BatchVPC
      AvailabilityZone: us-east-2b
      CidrBlock: 10.0.132.0/20
  IPv6SubnetB:
    Type: AWS::EC2::Subnet
    DependsOn: BatchVpcCidrBlockIpv6
    Properties:
      VpcId: !Ref BatchVPC
      AvailabilityZone: us-east-2b
      CidrBlock: 10.0.32.0/20
      Ipv6CidrBlock: !Select [1, !Cidr [!Select [0, !GetAtt 'BatchVPC.Ipv6CidrBlocks'], 256, 64]]
      # "AWS Batch multi-node parallel jobs use the Amazon ECS awsvpc network
      # mode, which gives your multi-node parallel job containers the same
      # networking properties as Amazon EC2 instances. Each multi-node parallel
      # job container gets its own elastic network interface, a primary private
      # IP address, and an internal DNS hostname. The network interface is
      # created in the same VPC subnet as its host compute resource." ->
      # Therefore AssignIpv6AddressOnCreation: true to ensure they also get a
      # IPv6 address
      AssignIpv6AddressOnCreation: true
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  IPv6SubnetDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref IPv6SubnetB
  BatchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'AWS-Batch-${AWS::StackName}'
      VpcId: !Ref BatchVPC
  BatchIpv4Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: BatchSecurityGroup
    Properties:
      Description: Allow IPv4 traffic
      GroupId: !Ref BatchSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0
  BatchIpv4Egress:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: BatchSecurityGroup
    Properties:
      Description: Allow IPv4 traffic
      GroupId: !Ref BatchSecurityGroup
      IpProtocol: "-1"
      CidrIp: 0.0.0.0/0
  BatchIpv6Ingress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: BatchSecurityGroup
    Properties:
      Description: Allow IPv6 traffic
      GroupId: !Ref BatchSecurityGroup
      IpProtocol: -1
      CidrIpv6: "::/0"
  BatchIpv6Egress:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: BatchSecurityGroup
    Properties:
      Description: Allow IPv6 traffic
      GroupId: !Ref BatchSecurityGroup
      IpProtocol: "-1"
      CidrIpv6: "::/0"
  BatchEfaIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: BatchSecurityGroup
    Properties:
      Description: Allow EFA communication
      GroupId: !Ref BatchSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref BatchSecurityGroup
  BatchEfaEgress:
    Type: "AWS::EC2::SecurityGroupEgress"
    DependsOn: BatchSecurityGroup
    Properties:
      Description: Allow EFA communication
      DestinationSecurityGroupId: !Ref BatchSecurityGroup
      GroupId: !Ref BatchSecurityGroup
      IpProtocol: "-1"

  ################################################################################
  # Roles for AWS Batch
  ################################################################################
  BatchServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'batch.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole'
  BatchJobRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: BucketAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: [ 's3:ListBucket', 's3:ListObjects', 's3:GetObject', 's3:PutObject', 's3:DeleteObject' ]
              Resource: [ !GetAtt S3DevBucket.Arn, !Sub '${S3DevBucket.Arn}/*' ]
            - Effect: Allow
              Action: [ 's3:ListBucket', 's3:ListObjects', 's3:GetObject' ]
              Resource:
                - !Sub "arn:aws:s3:::${AWS::StackName}-data"
                - !Sub "arn:aws:s3:::${AWS::StackName}-data/*"
                - !Sub "arn:aws:s3:::${AWS::StackName}-data-${AWS::Region}"
                - !Sub "arn:aws:s3:::${AWS::StackName}-data-${AWS::Region}/*"
      - PolicyName: EcsExec
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: ["ssmmessages:CreateControlChannel", "ssmmessages:CreateDataChannel", "ssmmessages:OpenControlChannel", "ssmmessages:OpenDataChannel", "ssm:*"]
              Resource: [ '*' ]
  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "ec2.amazonaws.com"
          Action: "sts:AssumeRole"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
      - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
      Policies:
        - PolicyName: CloudWatchPutMetricData
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'cloudwatch:PutMetricData'
                Resource: '*'
        - PolicyName: TerminateInstance
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'ec2:TerminateInstances'
                Resource: 'arn:aws:ec2:us-east-2:216212465934:instance/*'
  EcsInstanceProfile:
    DependsOn: EcsInstanceRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: EcsInstanceRole

  ################################################################################
  # Instance configuration
  ################################################################################
  P4dPlacementGroupB:
   Type: AWS::EC2::PlacementGroup
   Properties:
     Strategy: cluster

  P4LaunchTemplateB:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        Monitoring:
          Enabled: true
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeSize: 128
              VolumeType: gp3
        ImageId: ami-0ad5ad4fc21853cae  # /aws/service/ecs/optimized-ami/amazon-linux-2/gpu/recommended/image_id Version 75 2021-11-19T03:45:17 UTC
        InstanceType: p4d.24xlarge
        InstanceInitiatedShutdownBehavior: terminate
        KeyName: lausen
        NetworkInterfaces:
          - Description: EFA0
            # AssociatePublicIpAddress is unsupported with multiple network interafces
            # AssociatePublicIpAddress: true
            NetworkCardIndex: 0
            DeviceIndex: 0
            DeleteOnTermination: true
            # SubnetId required to avoid ComputeEnvironment INVALID -
            # CLIENT_ERROR - Instance launch failed with user error. Each
            # network interface requires either a subnet or a network interface
            # ID.
            SubnetId: !Ref IPv6SubnetB
            Groups:
              - !Ref BatchSecurityGroup
            InterfaceType: efa
          - Description: EFA1
            NetworkCardIndex: 1
            DeviceIndex: 1
            DeleteOnTermination: true
            SubnetId: !Ref IPv6SubnetB
            Groups:
              - !Ref BatchSecurityGroup
            InterfaceType: efa
          - Description: EFA2
            NetworkCardIndex: 2
            DeviceIndex: 2
            DeleteOnTermination: true
            SubnetId: !Ref IPv6SubnetB
            Groups:
              - !Ref BatchSecurityGroup
            InterfaceType: efa
          - Description: EFA3
            NetworkCardIndex: 3
            DeviceIndex: 3
            DeleteOnTermination: true
            SubnetId: !Ref IPv6SubnetB
            Groups:
              - !Ref BatchSecurityGroup
            InterfaceType: efa
        MetadataOptions:
          "HttpPutResponseHopLimit": 2
        UserData:
          Fn::Base64:
            !Sub
              - |
                MIME-Version: 1.0
                Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

                --==MYBOUNDARY==
                MIME-Version: 1.0
                Content-Type: text/x-shellscript; charset="us-ascii"

                #!/bin/bash
                sudo sysctl -w vm.nr_hugepages=5128
                sudo yum install -y git
                curl -O https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/datacenter-gpu-manager-2.3.1-1-x86_64.rpm
                sudo yum install -y datacenter-gpu-manager-2.3.1-1-x86_64.rpm
                sudo nvidia-smi -pm 1
                sudo amazon-linux-extras install -y lustre2.10
                sudo mkdir -p /fsx
                sudo mount -t lustre -o noatime ${DNSName}@tcp:/${LustreMountName} /fsx
                sudo mkdir -p /fsx_out
                sudo mount -t lustre -o noatime ${OutDNSName}@tcp:/${OutLustreMountName} /fsx_out
                curl -O https://efa-installer.amazonaws.com/aws-efa-installer-1.14.1.tar.gz
                tar -xf aws-efa-installer-1.14.1.tar.gz
                cd aws-efa-installer
                sudo ./efa_installer.sh -y -g -m
                python3 -m pip install boto3 torch==1.9.0+cu111 -f https://download.pytorch.org/whl/torch_stable.html
                python3 -c """
                import torch
                import boto3
                import sys
                import subprocess
                import urllib.request

                with urllib.request.urlopen('http://169.254.169.254/latest/meta-data/instance-id') as f:
                    instance_id = f.read().decode()

                with urllib.request.urlopen('http://169.254.169.254/latest/meta-data/instance-type') as f:
                    instance_type = f.read().decode()

                with urllib.request.urlopen('http://169.254.169.254/latest/meta-data/placement/region') as f:
                    region = f.read().decode()

                ec2 = boto3.client('ec2', region_name=region)
                cw = boto3.client('cloudwatch', region_name=region)
                print('Checking ' + instance_id)
                subprocess.run('dmesg')
                a = torch.tensor([1, 2, 3, 4])
                num_gpus_map = {'p3.2xlarge': 1, 'p3.8xlarge': 4, 'p3.16xlarge': 8, 'p3dn.24xlarge': 8, 'p4d.24xlarge': 8}
                try:
                    num_gpus = num_gpus_map[instance_type]
                except KeyError:
                    print('Instance Type ' + instance_type + 'is not supported!')
                    sys.exit()

                for x in range(num_gpus):
                    print('Checking device ' + str(x))
                    try:
                        a.to('cuda:' + str(x))
                    except RuntimeError:
                        print('Invalid GPU device ' + str(x) + ' in instance ' + instance_id)
                        print('Terminating Instance ' + instance_id)
                        cw.put_metric_data(
                            MetricData=[
                                {
                                    'MetricName': 'BadGPU',
                                    'Dimensions': [
                                        {
                                            'Name': 'MStarTraining',
                                            'Value': 'GPU'
                                        },
                                    ],
                                    'Unit': 'None',
                                    'Value': 1,
                                },
                            ],
                            Namespace='MStarTraining'
                        )
                        ids = [instance_id]
                        ec2.terminate_instances(InstanceIds=ids)
                        sys.exit()
                # Publish a metric with good GPUs
                cw.put_metric_data(
                    MetricData=[
                        {
                            'MetricName': 'BadGPU',
                            'Dimensions': [
                                {
                                    'Name': 'MStarTraining',
                                    'Value': 'GPU'
                                },
                            ],
                            'Unit': 'None',
                            'Value': 0,
                        },
                    ],
                    Namespace='MStarTraining'
                )
                print('Instance ' + instance_id + ' has all GPUs working')
                """

                --==MYBOUNDARY==--
              - DNSName: !GetAtt BasicS3LinkedLustreFileSystem.DNSName
                LustreMountName: !GetAtt BasicS3LinkedLustreFileSystem.LustreMountName
                OutDNSName: !GetAtt DevS3LinkedLustreFileSystem.DNSName
                OutLustreMountName: !GetAtt DevS3LinkedLustreFileSystem.LustreMountName

  ################################################################################
  # AWS Batch
  ################################################################################
  # Managed multi-node parallel environment
  P4BatchComputeEnvironmentB:
    Type: AWS::Batch::ComputeEnvironment
    DependsOn: P4LaunchTemplateB
    Properties:
      Type: MANAGED
      ServiceRole: !GetAtt BatchServiceRole.Arn
      ComputeResources:
        MaxvCpus: 6144  # 96 vCPUs per p4d; 32 p4d
        MinvCpus: 0  # MinvCpus, DesiredvCpus 0 to avoid use of (unsupported) AutoScalingGroup
        PlacementGroup: !Ref P4dPlacementGroupB
        Type: EC2
        AllocationStrategy: BEST_FIT
        InstanceRole: !Ref EcsInstanceProfile
        LaunchTemplate:
          LaunchTemplateId: !Ref P4LaunchTemplateB
          Version: "$Latest"  # Not updated after ComputeEnvironment creation
        InstanceTypes: [ p4d.24xlarge ]
        Tags: {"Name" : "Batch Instance - P4OnDemand"}
        Subnets: [ !Ref IPv6SubnetB ]
      State: ENABLED

  P4BatchJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub '${AWS::StackName}-p4'
      Priority: 1
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Ref P4BatchComputeEnvironmentB
          Order: 1

  ################################################################################
  # SNS configuration
  ################################################################################
  MStarTrainingSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: "mist-team@amazon.com"
          Protocol: "email"
      TopicName: !Sub '${AWS::StackName}-Bad_GPU_Detected'
  ################################################################################
  # CloudWatch configuration
  ################################################################################
  BadGPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmName: !Sub '${AWS::StackName}-Bad GPU Detected'
        AlarmDescription: "Bad GPU detected in launching the EC2 instances. Please check
            the log stream for details."
        ActionsEnabled: true
        OKActions: []
        AlarmActions:
          - !Ref MStarTrainingSNSTopic
        InsufficientDataActions: []
        MetricName: !Sub '${AWS::StackName}-BadGPU'
        Namespace: MStarTraining
        Statistic: Maximum
        Dimensions:
          - Name: MStarTraining
            Value: GPU
        Period: 300
        EvaluationPeriods: 1
        DatapointsToAlarm: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: missing

Outputs:
  ECR:
    Description: Container repository
    Value: !Ref ECR
    Export:
      Name: !Sub '${AWS::StackName}-ECR'
  BatchJobRoleArn:
    Description: Container repository
    Value: !GetAtt BatchJobRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BatchJobRoleArn'
